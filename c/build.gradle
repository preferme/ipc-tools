/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details take a look at the Building C++ applications and libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_cpp_projects.html
 */

plugins {
    // Apply the cpp-library plugin to add support for building C++ libraries
    id 'cpp-library'

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    id 'cpp-unit-test'
}

library {
    linkage = [Linkage.SHARED]
    // Set the target operating system and architecture for this library
    targetMachines = [
            machines.linux.x86_64,
            machines.windows.x86,
            machines.windows.x86_64,
            machines.macOS.x86_64
    ]
    baseName = "ipc-tools"

}

// make jdkHome
String jdkHome = System.properties.get("java.home")
if (jdkHome.endsWith("/jre")) {
    jdkHome = jdkHome.substring(0, jdkHome.length()-4)
}

tasks.withType(CppCompile).configureEach {
    // Define a preprocessor macro for every binary
    macros.put("NDEBUG", null)

    includes.from "${jdkHome}/include"

    if (machines.host().operatingSystemFamily.macOs) {
        includes.from "${jdkHome}/include/darwin"
//      linker.args '-mmacosx-version-min=10.4'
    } else if (machines.host().operatingSystemFamily.linux) {
        includes.from "${jdkHome}/include/linux"
//      compilerArgs.add '-D_FILE_OFFSET_BITS=64'
    } else if (machines.host().operatingSystemFamily.windows) {
        includes.from "${jdkHome}/include/win32"
//      linker.args "Shlwapi.lib", "Advapi32.lib"
    } else if (machines.host().operatingSystemFamily.freeBSD) {
        includes.from "${jdkHome}/include/freebsd"
    }

    // Define toolchain-specific compiler options
    compilerArgs.addAll toolChain.map { toolChain ->
        if (toolChain in [ Gcc, Clang ]) {
            return ['-O2', '-fno-access-control']
        } else if (toolChain in VisualCpp) {
            return ['/Zi']
        }
        return []
    }

}

tasks.register("copyLib", Copy) {
    dependsOn ':c:assembleReleaseMacosX86-64'
    from 'build/lib/main/release/macos/x86-64'
    into 'build/lib'
    include '*.dylib'
}