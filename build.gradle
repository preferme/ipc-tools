plugins {
//    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id 'idea'
    id 'cpp-library'
    id 'java'
}

group 'com.github.preferme'
version '1.2.1'

library {
    linkage = [Linkage.SHARED]
    targetMachines = [
            machines.linux.x86_64,
            machines.windows.x86,
            machines.windows.x86_64,
            machines.macOS.x86_64
    ]
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}

def javaHome = System.getenv('JAVA_HOME')

tasks.withType(CppCompile).configureEach {
    // Define a preprocessor macro for every binary
    macros.put("NDEBUG", null)

    // Define a compiler options
    compilerArgs.add '-W3'


    compilerArgs.add "-I${javaHome}/include"
    if (machines.windows) {
        compilerArgs.add "-I${javaHome}/include/win32"
    } else if (machines.macOS) {
        compilerArgs.add "-I${javaHome}/include/darwin"
    }
//    binaries.all {
//        if (targetPlatform.operatingSystem.macOsX) {
//            cCompiler.args '-I', "${Jvm.current().javaHome}/include"
//            cCompiler.args '-I', "${Jvm.current().javaHome}/include/darwin"
//            cCompiler.args '-mmacosx-version-min=10.4'
//            linker.args '-mmacosx-version-min=10.4'
//        } else if (targetPlatform.operatingSystem.linux) {
//            cCompiler.args '-I', "${Jvm.current().javaHome}/include"
//            cCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
//            cCompiler.args '-D_FILE_OFFSET_BITS=64'
//        } else if (targetPlatform.operatingSystem.windows) {
//            cCompiler.args "-I${Jvm.current().javaHome}/include"
//            cCompiler.args "-I${Jvm.current().javaHome}/include/win32"
//            linker.args "Shlwapi.lib", "Advapi32.lib"
//        } else if (targetPlatform.operatingSystem.freeBSD) {
//            cCompiler.args '-I', "${Jvm.current().javaHome}/include"
//            cCompiler.args '-I', "${Jvm.current().javaHome}/include/freebsd"
//        }
//    }

    // Define toolchain-specific compiler options
    compilerArgs.addAll toolChain.map { toolChain ->
        if (toolChain in [ Gcc, Clang ]) {
            return ['-O2', '-fno-access-control']
        } else if (toolChain in VisualCpp) {
            return ['/Zi']
        }
        return []
    }
}